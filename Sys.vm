// ========== Bitwise XOR ==========
function Sys.xor 0
push argument 0
push argument 1
or
push argument 0
push argument 1
and
not
and
return

// ========== Shift Left ==========
function Sys.shiftLeft 2
push argument 0
pop local 0
push argument 1
pop local 1

(LOOP_START)
    push local 1
    push constant 0
    eq
    if-goto DONE

    push local 0
    push local 0
    add
    pop local 0

    push local 1
    push constant 1
    sub
    pop local 1

    goto LOOP_START

(DONE)
push local 0
return

// ========== Compute Parity ==========
function Sys.computeParity 3
push constant 0
pop local 2

push constant 0
pop local 0

(LOOP)
    push local 0
    push constant 15
    lt
    if-goto PROCESS
    goto END

(PROCESS)
    push constant 1
    push local 0
    call Sys.shiftLeft 2
    pop local 1

    push argument 0
    push local 1
    and
    push constant 0
    eq
    if-goto NEXT

    push local 2
    push constant 1
    call Sys.xor 2
    pop local 2

(NEXT)
    push local 0
    push constant 1
    add
    pop local 0
    goto LOOP

(END)
push local 2
return

// ========== Encode Value with Parity ==========
function Sys.encode 3
push argument 0
pop local 0

push argument 0
call Sys.computeParity 1
pop local 1

push constant 1
push constant 15
call Sys.shiftLeft 2
pop local 2

push local 1
push constant 1
eq
if-goto SET_BIT
goto CLEAR_BIT

(SET_BIT)
    push local 0
    push local 2
    or
    pop local 0
    goto DONE

(CLEAR_BIT)
    push local 0
    push local 2
    not
    and
    pop local 0
    goto DONE

(DONE)
push local 0
return

// ========== EMPTY init (Required but should be empty for testing) ==========
function Sys.init 0
return

